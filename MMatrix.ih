/* -*-gnu-*- */
/*
 * CxxUtils C++ utility library
 * Copyright (c) 2003, 2006 Andreas Kolb, Martin Dietze and Contributors
 *
 * Unless otherwise stated, this software is provided under the terms of the
 * GNU LESSER PUBLIC LICENSE. The text of this license agreement accompanies
 * this library's source distribution.
 */

/* --------------------------------------------------------------------
 * Generic Matrix class inline implementations
 *
 * $Date: 2006-03-27 11:08:15 $
 * $Revision: 1.3 $
 * -------------------------------------------------------------------- */

template<class Scalar> INLINE bool
CxxUtils::MMatrix<Scalar>::operator== (const MMatrix<Scalar> &matrix)
{
  return m_rows == matrix.m_rows && m_cols == matrix.m_cols &&
    *m_values == *matrix.m_values;
}

template<class Scalar> INLINE bool
CxxUtils::MMatrix<Scalar>::operator!= (const MMatrix<Scalar> &matrix)
{
  return !(*this == matrix);
}

template<class Scalar> INLINE Scalar &
CxxUtils::MMatrix<Scalar>::operator ()(int row, int col)
{
  return m_values->at (m_rowOffsets[row] + col);
}

template<class Scalar> INLINE CxxUtils::MMatrix<Scalar> &
CxxUtils::MMatrix<Scalar>::operator= (const CxxUtils::MMatrix<Scalar> &m)
{
  destroy ();
  copy (m);
  return *this;
}


template<class Scalar> INLINE int
CxxUtils::MMatrix<Scalar>::cols (void) const
{
  return m_cols;
}

template<class Scalar> INLINE int
CxxUtils::MMatrix<Scalar>::rows (void) const
{
  return m_rows;
}
