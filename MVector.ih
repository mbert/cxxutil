/* -*-gnu-*- */
/*
 * CxxUtils C++ utility library
 * Copyright (c) 2003, 2006 Andreas Kolb, Martin Dietze and Contributors
 *
 * Unless otherwise stated, this software is provided under the terms of the
 * GNU LESSER PUBLIC LICENSE. The text of this license agreement accompanies
 * this library's source distribution.
 */

/* --------------------------------------------------------------------
 * Vector class inline implementations
 *
 * $Date: 2006-03-27 11:08:15 $
 * $Revision: 1.3 $
 * -------------------------------------------------------------------- */


// ASSIGNMENT OPERATORS
// unary
template<class Scalar> INLINE CxxUtils::MVector<Scalar> &
CxxUtils::MVector<Scalar>::operator= (const CxxUtils::MVector<Scalar> &v)
{
  assignTo (v);
  return *this;
}

template<class Scalar> INLINE CxxUtils::MVector<Scalar> &
CxxUtils::MVector<Scalar>::operator+= (const CxxUtils::MVector<Scalar> &v)
{
  addToMe (v);
  return *this;
}

template<class Scalar> INLINE CxxUtils::MVector<Scalar> &
CxxUtils::MVector<Scalar>::operator-= (const CxxUtils::MVector<Scalar> &v)
{
  subFromMe (v);
  return *this;
}

template<class Scalar> INLINE CxxUtils::MVector<Scalar> &
CxxUtils::MVector<Scalar>::operator*= (const Scalar s)
{
  multMeBy (s);
  return *this;
}

template<class Scalar> INLINE CxxUtils::MVector<Scalar> &
CxxUtils::MVector<Scalar>::operator/= (const Scalar s)
{
  divMeBy (s);
  return *this;
}


// binary
// NOTE: operators of type `Scalar operator vector` are not
// implemented due to template constraints
template<class Scalar> INLINE CxxUtils::MVector<Scalar> 
CxxUtils::MVector<Scalar>::operator+ (const CxxUtils::MVector<Scalar> &v) const
{
  return add (v);
}

template<class Scalar> INLINE CxxUtils::MVector<Scalar> 
CxxUtils::MVector<Scalar>::operator- (const CxxUtils::MVector<Scalar> &v) const
{
  return subtract (v);
}

template<class Scalar> INLINE CxxUtils::MVector<Scalar> 
CxxUtils::MVector<Scalar>::operator* (const Scalar s) const
{
  return multiply (s);
}

template<class Scalar> INLINE CxxUtils::MVector<Scalar> 
CxxUtils::MVector<Scalar>::operator/ (const Scalar s) const
{
  return divide (s);
}

// NORM OPERATORS
// compute vector norm
template<class Scalar> INLINE Scalar 
CxxUtils::MVector<Scalar>::getNorm () const
{
  return sqrt (this->getNormQuad ());
}

template<class Scalar> INLINE CxxUtils::MVector<Scalar> 
CxxUtils::MVector<Scalar>::operator* (const CxxUtils::MVector<Scalar> &v) const
{
  return multiply (v);
}
