/* -*-gnu-*- */
/*
 * CxxUtil C++ utility library
 * Copyright (c) 2003, 2006 Andreas Kolb, Martin Dietze and Contributors
 *
 * Unless otherwise stated, this software is provided under the terms of the
 * GNU LESSER PUBLIC LICENSE. The text of this license agreement accompanies
 * this library's source distribution.
 */

/* --------------------------------------------------------------------
 * Generic Point class inline implementations
 *
 * $Date: 2006-03-27 13:00:00 $
 * $Revision: 1.4 $
 * -------------------------------------------------------------------- */

// Assignment to another point 
template<class Scalar> INLINE CxxUtil::MPoint<Scalar> &
CxxUtil::MPoint<Scalar>::operator= (const CxxUtil::MPoint<Scalar> &t)
{
  this->assignTo (t);
  return *this;
}

// Assignment to a scalar
template<class Scalar> INLINE CxxUtil::MPoint<Scalar> &
CxxUtil::MPoint<Scalar>::operator= (const Scalar s)
{
  this->assignTo (s);
  return *this;
}

// Assignment to the same point plus scalar s
template<class Scalar> INLINE CxxUtil::MPoint<Scalar> &
CxxUtil::MPoint<Scalar>::operator+= (const Scalar s)
{
  this->addToMe (s);
  return *this;
}

// Assignment to the same point minus scalar t
template<class Scalar> INLINE CxxUtil::MPoint<Scalar> &
CxxUtil::MPoint<Scalar>::operator-= (const Scalar s)
{
  this->subFromMe (s);
  return *this;
}

// Assignment to the same point plus point t
template<class Scalar> INLINE CxxUtil::MPoint<Scalar> &
CxxUtil::MPoint<Scalar>::operator+= (const CxxUtil::MVector<Scalar> &t)
{
  this->addToMe (t);
  return *this;
}

// Assignment to the same point minus point t
template<class Scalar> INLINE CxxUtil::MPoint<Scalar> &
CxxUtil::MPoint<Scalar>::operator-= (const CxxUtil::MVector<Scalar> &t)
{
  this->subFromMe (t);
  return *this;
}

// Returns the sum of *this and point t
template<class Scalar> INLINE CxxUtil::MPoint<Scalar>
CxxUtil::MPoint<Scalar>::operator+ (const CxxUtil::MVector<Scalar> &t) const
{
  return this->add (t);
}

  // Returns the difference of *this and point t
template<class Scalar> INLINE CxxUtil::MPoint<Scalar>
CxxUtil::MPoint<Scalar>::operator- (const CxxUtil::MVector<Scalar> &t) const
{
  return this->subtract (t);
}

  // Returns the difference of *this and point t
template<class Scalar> INLINE CxxUtil::MVector<Scalar>
CxxUtil::MPoint<Scalar>::operator- (const CxxUtil::MPoint<Scalar> &t) const
{
  return MVector<Scalar> (this->subtract (t));
}


template<class Scalar> INLINE CxxUtil::MPoint<Scalar> 
CxxUtil::MPoint<Scalar>::operator* (const CxxUtil::MPoint<Scalar> &v) const
{
  return this->multiply (v);
}

template<class Scalar> INLINE CxxUtil::MPoint<Scalar> 
CxxUtil::MPoint<Scalar>::operator* (const Scalar s) const
{
  return this->multiply (s);
}
