/* ********************************************************************
//  Class: MPoint
//  Inline methods for class MPoint
//  -------------------------------------------------------------------
//  Project: Repairing and texturing of VR models
//  (C) Copyright Fachhochschule Wedel, Germany 2003
//  -------------------------------------------------------------------
//  $Revision: 1.2 $
//  $Date: 2006-03-27 09:02:55 $
// ******************************************************************** */

// Assignment to another point 
template<class Scalar> INLINE CxxUtils::MPoint<Scalar> &
CxxUtils::MPoint<Scalar>::operator= (const CxxUtils::MPoint<Scalar> &t)
{
  assignTo (t);
  return *this;
}

// Assignment to a scalar
template<class Scalar> INLINE CxxUtils::MPoint<Scalar> &
CxxUtils::MPoint<Scalar>::operator= (const Scalar s)
{
  assignTo (s);
  return *this;
}

// Assignment to the same point plus scalar s
template<class Scalar> INLINE CxxUtils::MPoint<Scalar> &
CxxUtils::MPoint<Scalar>::operator+= (const Scalar s)
{
  addToMe (s);
  return *this;
}

// Assignment to the same point minus scalar t
template<class Scalar> INLINE CxxUtils::MPoint<Scalar> &
CxxUtils::MPoint<Scalar>::operator-= (const Scalar s)
{
  subFromMe (s);
  return *this;
}

// Assignment to the same point plus point t
template<class Scalar> INLINE CxxUtils::MPoint<Scalar> &
CxxUtils::MPoint<Scalar>::operator+= (const CxxUtils::MVector<Scalar> &t)
{
  addToMe (t);
  return *this;
}

// Assignment to the same point minus point t
template<class Scalar> INLINE CxxUtils::MPoint<Scalar> &
CxxUtils::MPoint<Scalar>::operator-= (const CxxUtils::MVector<Scalar> &t)
{
  subFromMe (t);
  return *this;
}

// Returns the sum of *this and point t
template<class Scalar> INLINE CxxUtils::MPoint<Scalar>
CxxUtils::MPoint<Scalar>::operator+ (const CxxUtils::MVector<Scalar> &t) const
{
  return add (t);
}

  // Returns the difference of *this and point t
template<class Scalar> INLINE CxxUtils::MPoint<Scalar>
CxxUtils::MPoint<Scalar>::operator- (const CxxUtils::MVector<Scalar> &t) const
{
  return subtract (t);
}

  // Returns the difference of *this and point t
template<class Scalar> INLINE CxxUtils::MVector<Scalar>
CxxUtils::MPoint<Scalar>::operator- (const CxxUtils::MPoint<Scalar> &t) const
{
  return MVector<Scalar> (subtract (t));
}


template<class Scalar> INLINE CxxUtils::MPoint<Scalar> 
CxxUtils::MPoint<Scalar>::operator* (const CxxUtils::MPoint<Scalar> &v) const
{
  return multiply (v);
}

template<class Scalar> INLINE CxxUtils::MPoint<Scalar> 
CxxUtils::MPoint<Scalar>::operator* (const Scalar s) const
{
  return multiply (s);
}
