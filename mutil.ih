/* -*-gnu-*- */
/*
 * CxxUtil C++ utility library
 * Copyright (c) 2003, 2006 Andreas Kolb, Martin Dietze and Contributors
 *
 * Unless otherwise stated, this software is provided under the terms of the
 * GNU LESSER PUBLIC LICENSE. The text of this license agreement accompanies
 * this library's source distribution.
 */

/* --------------------------------------------------------------------
 * Math utility function inline implementations
 *
 * $Date: 2006-03-27 13:40:22 $
 * $Revision: 1.5 $
 * -------------------------------------------------------------------- */

#include <cmath>
#include <cfloat>

INLINE double
CxxUtil::cub (double a)
{
  return a * a * a;
}

INLINE float
CxxUtil::cub (float a)
{
  return a * a * a;
}

INLINE double
CxxUtil::sqr (double a)
{
  return a * a;
}

INLINE float
CxxUtil::sqr (float a)
{
  return a * a;
}

INLINE int
CxxUtil::abs (int a)
{
  return (a < 0) ? -a : a;
}

INLINE void
CxxUtil::swap (double &a, double &b)
{
  double temp = a;
  a = b;
  b = temp;
}

INLINE void
CxxUtil::swap (float &a, float &b)
{
  float temp = a;
  a = b;
  b = temp;
}

INLINE void
CxxUtil::swap (int &a, int &b)
{
  int temp = a;
  a = b;
  b = temp;
}

INLINE double
CxxUtil::sign (double a, double b)
{
  return (a < 0) ? -b : b;
}

INLINE float
CxxUtil::sign (float a, float b)
{
  return (a < 0) ? -b : b;
}

INLINE int
CxxUtil::sign (int a, int b)
{
  return (a < 0) ? -b : b;
}

INLINE double
CxxUtil::min (double a, double b)
{
  return (a > b) ? b : a;
}

INLINE double
CxxUtil::max (double a, double b)
{
  return (a > b) ? a : b;
}

INLINE float
CxxUtil::min (float a, float b)
{
  return (a > b) ? b : a;
}

INLINE float
CxxUtil::max (float a, float b)
{
  return (a > b) ? a : b;
}

INLINE int
CxxUtil::min (int a, int b)
{
  return (a > b) ? b : a;
}

INLINE int
CxxUtil::max (int a, int b)
{
  return (a > b) ? a : b;
}

INLINE int
CxxUtil::toInt (double a)
{
  return (a >= 0.0) ? int (a + 0.5) : int (a - 0.5);
}

INLINE int
CxxUtil::toInt (float a)
{
  return (a >= 0.0) ? int (a + 0.5) : int (a - 0.5);
}

INLINE bool
CxxUtil::isZero (double d)
{
  return (fabs (d) < DBL_EPSILON);
}

INLINE bool
CxxUtil::isZero (float f)
{
  return (fabs (f) < FLT_EPSILON);
}
