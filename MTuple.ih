/* -*-gnu-*- */
/*
 * CxxUtils C++ utility library
 * Copyright (c) 2003, 2006 Andreas Kolb, Martin Dietze and Contributors
 *
 * Unless otherwise stated, this software is provided under the terms of the
 * GNU LESSER PUBLIC LICENSE. The text of this license agreement accompanies
 * this library's source distribution.
 */

/* --------------------------------------------------------------------
 * Generic tuple class inline implementations
 *
 * $Date: 2006-03-27 11:08:15 $
 * $Revision: 1.3 $
 * -------------------------------------------------------------------- */

template<class Scalar> INLINE Scalar &
CxxUtils::MTuple<Scalar>::at (int pos)
{
  return this->m_coord[pos];
}

template<class Scalar> INLINE CxxUtils::MTuple<Scalar> &
CxxUtils::MTuple<Scalar>::operator+= (CxxUtils::MTuple<Scalar> & v)
{
  addToMe (v);
  return *this;
}

template<class Scalar> INLINE CxxUtils::MTuple<Scalar> &
CxxUtils::MTuple<Scalar>::operator-= (CxxUtils::MTuple<Scalar> & v)
{
  subFromMe (v);
  return *this;
}

template<class Scalar> INLINE CxxUtils::MTuple<Scalar> &
CxxUtils::MTuple<Scalar>::operator*= (const Scalar s)
{
  multMeBy (s);
  return *this;
}

template<class Scalar> INLINE CxxUtils::MTuple<Scalar> &
CxxUtils::MTuple<Scalar>::operator/= (const Scalar s)
{
  divMeBy (s);
  return *this;
}

template<class Scalar> INLINE CxxUtils::MTuple<Scalar> 
CxxUtils::MTuple<Scalar>::mul (const CxxUtils::MTuple<Scalar> & v) const 
{
  return MTuple<Scalar> (this->multiply (v));
}

////////////////////////////////////////////////////////////////////////
// BINARY ASSIGNMENT OPERATORS
// NOTE: operators of type `Scalar operator Tuple` are not
// implemented due to template constraints
////////////////////////////////////////////////////////////////////////

// Returns the sum of *this and tuple t
template<class Scalar> INLINE CxxUtils::AbstractTuple<Scalar>
CxxUtils::AbstractTuple<Scalar>::add (const CxxUtils::AbstractTuple<Scalar> &t) const
{
  return AbstractTuple<Scalar> (*this, '+', t);
}

// Returns the sum of *this and Scalar s
template<class Scalar> INLINE CxxUtils::AbstractTuple<Scalar>
CxxUtils::AbstractTuple<Scalar>::add (const Scalar s) const
{
  return AbstractTuple<Scalar> (*this, '+', s);
}

// Returns the difference of *this and tuple t
template<class Scalar> INLINE CxxUtils::AbstractTuple<Scalar>
CxxUtils::AbstractTuple<Scalar>::subtract (const CxxUtils::AbstractTuple<Scalar> &t) const
{
  return AbstractTuple<Scalar> (*this, '-', t);
}

// Returns the difference of *this and Scalar s
template<class Scalar> INLINE CxxUtils::AbstractTuple<Scalar>
CxxUtils::AbstractTuple<Scalar>::subtract (const Scalar s) const
{
  return AbstractTuple<Scalar> (*this, '-', s);
}

// Returns the componentwise product of *this and tuple t
template<class Scalar> INLINE CxxUtils::AbstractTuple<Scalar>
CxxUtils::AbstractTuple<Scalar>::multiply (const CxxUtils::AbstractTuple<Scalar> &t) const
{
  return AbstractTuple<Scalar> (*this, '*', t);
}

// Returns the componentwise product of *this and Scalar s
template<class Scalar> INLINE CxxUtils::AbstractTuple<Scalar>
CxxUtils::AbstractTuple<Scalar>::multiply (const Scalar s) const
{
  return AbstractTuple<Scalar> (*this, '*', s);
}

// Returns the componentwise division of *this by tuple t
// NOTE: The components of t MUST be != zero!
template<class Scalar> INLINE CxxUtils::AbstractTuple<Scalar>
CxxUtils::AbstractTuple<Scalar>::divide (const CxxUtils::AbstractTuple<Scalar> &t) const
{
  return AbstractTuple<Scalar> (*this, '/', t);
}

// Returns the componentwise division of *this by s
// NOTE: s MUST be != zero!
template<class Scalar> INLINE CxxUtils::AbstractTuple<Scalar>
CxxUtils::AbstractTuple<Scalar>::divide (const Scalar s) const
{
  return AbstractTuple<Scalar> (*this, '/', s);
}
